while (i < 5) {
x <- rexp(n = 50, rate = 1)
xMean <- mean(x)
vMean <- c(vMean, xMean)
i = i + 1
}
hist(vMean)  #Notice that the histogram begins to resemble the Normal
shapiro.test(vMean)
i <- 0
vMean <- vector(mode="numeric", length=0)
while (i < 1000) {
x <- rexp(n = 50, rate = 1)
xMean <- mean(x)
vMean <- c(vMean, xMean)
i = i + 1
}
hist(vMean)  #Notice that the histogram begins to resemble the Normal
shapiro.test(vMean)
i <- 0
vMean <- vector(mode="numeric", length=0)
while (i < 1000) {
x <- rexp(n = 50, rate = 4)
xMean <- mean(x)
vMean <- c(vMean, xMean)
i = i + 1
}
hist(vMean)  #Notice that the histogram begins to resemble the Normal
shapiro.test(vMean)
head(stat500)
data <- read.table(stat500)
data <- read.table("stat500.txt")
data <- read.table(stat500.txt)
data <- stat500.txt
data <- stat500
data
data$final
stat500$final
hist(stat500$final)
hist(stat500$final, main ="Histogram of final scores")
curve(dnorm(x, mean=mean(stat500$final), sd=std(stat500$final)), col="darkblue", lwd=2, add=TRUE, yaxt="n")
curve(dnorm(x, mean=mean(stat500$final), sd=sqrt(var((stat500$final)), col="darkblue", lwd=2, add=TRUE, yaxt="n")
curve(dnorm(x, mean=mean(stat500$final), sd=sqrt(var((stat500$final))), col="darkblue", lwd=2, add=TRUE, yaxt="n")
curve(dnorm(x, mean=mean(stat500$final), sd=sqrt(var((stat500$final))), col="darkblue", lwd=2, add=TRUE)
curve(dnorm(x, mean=mean(stat500$final), sd=sqrt(var((stat500$final))), col="darkblue", lwd=2, add=TRUE))
curve(dnorm(x, mean=mean(stat500$final), sd=sqrt(var(stat500$final)), col="darkblue", lwd=2, add=TRUE)
line(dnorm(x, mean=mean(stat500$final), sd=sqrt(var(stat500$final)), col="darkblue", lwd=2, add=TRUE)
curve(dnorm(x, mean=mean(stat500$final), sd=sd(stat500$final), lwd=2, add=TRUE)
hist(stat500$final, main ="Histogram of final scores")
curve(dnorm(x, mean=mean(stat500$final), sd=sd(stat500$final), lwd=2, add=TRUE)
curve(dnorm(x, mean=mean(stat500$final), sd=sd(stat500$final), lwd=2, add=TRUE)
curve(dnorm(x, mean=mean(stat500$final), sd=sd(stat500$final), add=TRUE)
hist(grades, main ="Histogram of final scores")
grades <- stat500$final
hist(grades, main ="Histogram of final scores")
curve(dnorm(x, mean=mean(stat500$final), sd=sd(stat500$final), add=TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades), add=TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)) add=TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
grades <- stat500$final
hist(grades, main ="Histogram of final scores")
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
hist(grades, main ="Histogram of final scores", prob = TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRU
hist(grades, main ="Histogram of final scores", prob = TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = (0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = c(0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "darkblue",add=TRUE)
grades <- stat500$final
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = c(0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "darkblue",add=TRUE)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "blue", add=TRUE)
grades <- stat500$final
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = c(0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "blue", add=TRUE)
shapiro.test(grades)
grades <- stat500$final
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = c(0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "blue", add=TRUE)
shapiro.test(grades)
qqnorm(grades)
qqnorm(rnorm(9))
qqnorm(rnorm(9))
qqnorm(rnorm(900))
qqnorm(grades)
qqnorm(rnorm(900))
qqnorm(grades)
grades <- stat500$final
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = c(0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "blue", add=TRUE)
shapiro.test(grades)
hist(midterms)
midterms <- stat500$midterm
hist(midterms)
grades <- stat500$final
hist(grades, main ="Histogram of final scores", prob = TRUE, ylim = c(0, 0.08))
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), col = "blue", add=TRUE)
shapiro.test(grades)
scaledMid <- scaled(midterms)
scaledMid <- scale.default(midterms)
mean(scaledMid)
st(scaledMid)
sd(scaledMid)
hist(scaledMid)
plot(scaledMid)
chart(scaledMid)
hist(scaledMid)
stdFin <- scale.default(grades)
mean(stdFin)
sd(stdFin)
plot(stdMid, col="green")
plot(stdMid)
chart(stdMid)
plot(stdMid)
midterms <- stat500$midterm
stdMid <- scale.default(midterms)
stdFin <- scale.default(grades)
plot(stdMid)
plot(stdFin, col = 'green')
lines(stdFin, col = 'green')
plot(stdMid)
lines(stdFin, col = 'green')
dotchart(stdFin, col = 'green')
plot(stdMid)
plot(stdFin, col = 'green', add= TRUE)
plot(stdMid)
plot(stdFin, col = 'green', add= TRUE)
matplot(x, cbind(stdMid,stdFin),type="l",col=c("red","green"),lty=c(1,1))
matplot(, cbind(stdMid,stdFin),type="l",col=c("red","green"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="l",col=c("red","green"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="d",col=c("red","green"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="b",col=c("red","green"),lty=c(1,1))
p
plot(stdMid)
plot(stdFin, col = 'green', add= TRUE)
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"),lty=c(1,1))
plot(stdMid)
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"))
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"),lty=c(1,2))
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"),lty=c(1,8))
matplot(cbind(stdMid,stdFin),type="p",lty=c(1,1))
col=c("red","green"),
matplot(cbind(stdMid,stdFin),type="p",col=c("red","green"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p",lty=c(1,1))
matplot(cbind(stdMid,stdFin),lty=c(1,1))
stdFin <- scale.default(grades)
plot(stdMid)
plot(stdFin, col = 'green', add= TRUE)
matplot(cbind(stdMid,stdFin),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="o",lty=c(1,1))
plot(stdMid)
plot(stdFin, col = 'green', add= TRUE)
matplot(cbind(stdMid,stdFin),type="o",lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p",lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="b",lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= NULL,lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= (NULL),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= (y,g),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= (y,g),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= c(y,g),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= c('M',"F"),lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= c('M',"F"), lty=c(1,1))
midterms <- stat500$midterm
stdMid <- scale.default(midterms)
stdFin <- scale.default(grades)
plot(stdMid)
plot(stdFin, col = 'green', add= TRUE)
matplot(cbind(stdMid,stdFin),type="p", pch= c('M',"F"), lty=c(1,1))
plot(stdFin, col = 'green', add= TRUE)
matplot(cbind(stdMid,stdFin),type="p", pch= c('M',"F"), lty=c(1,1))
matplot(cbind(stdMid,stdFin),type="p", pch= c('M',"F"), lty=c(1,1))
v <- c(0,0,0,0,0,0,0,1)
var(v)
v <- 1
i <- 0
while (i < 500) {
v <- c(v,0)
i = i + 1
}
var(v)
v <- 1
i <- 0
while (i < 1) {
v <- c(v,0)
i = i + 1
}
var(v)
v <- 1
i <- 0
while (i < 2) {
v <- c(v,0)
i = i + 1
}
var(v)
summary(teengamb)
mean(teengamb)
mean(teengamb$)
mean(teengamb$*)
$gamble
mean(teengamb$gamble)
outlier <- sample(5x)
x = seq(0,1000, len = 1000)
y = x
outlier = lm(y ~ x)
plot(outlier)
plot.default(x, y)
plot.default(x, outlier)
plot.default(y)
outlier = c(y,600)
plot.default(outlier)
plot.default(x,outlier)
x = c(x,400)
plot.default(x,outlier)
x = seq(0,1000, len = 1000)
y = x
outlier = c(y,800)
x = c(x,400)
plot.default(x,outlier)
x = seq(0,1000, len = 1000)
y = x
mod1 = lm(y ~ x)
outlier = c(y,800)
x = c(x,400)
mod2 = lm(outlier ~ x)
plot.default(x,outlier)
summary(mod1)
summary(mod2)
x = seq(0,1000, len = 1000)
y = x
mod1 = lm(y ~ x)
leverage = c(y, 1300)
x = c(x, 1300)
mod2 = lm(leverage ~ x)
plot.default(x, leverage)
x = seq(0,1000, len = 1000)
y = x
mod1 = lm(y ~ x)
influ = c(y, 100)
x = c(x, 0)
mod2 = lm(influ ~ x)
plot.default(x, influ)
summary(mod1)
summary(mod2)
influ = c(y, 1000)
x = c(x, 0)
mod2 = lm(influ ~ x)
plot.default(x, influ)
summary(mod1)
influ = c(y, 1000)
x = c(x, 0)
mod2 = lm(influ ~ x)
plot.default(x, influ)
x = seq(0,1000, len = 1000)
y = x
mod1 = lm(y ~ x)
influ = c(y, 1000)
x = c(x, 0)
mod2 = lm(influ ~ x)
plot.default(x, influ)
summary(mod1)
summary(mod2)
dat = seq(0.1, 2, len = 500)
x = seq(0.1, 2, len = 500)
y = norm(x)
y <- rnorm(500, mean=x, sd=x)
plot(y, x)
plot(x,y)
lmod <- lm(y ~ x)
plot(lmod)
tail(y)
head(y)
summary(lmod)
plot(x,yprime)
yprime <- y/x
plot(x,yprime)
xprime <- 1/x
plot(xprime,yprime)
x <- runif(500, 0.1, 2)
y <- rnorm(500, x, x)
lmod <- lm(y ~ x)
plot(x,y)
abline(lmod, col = "red")
par(mfrow = c(2,2))
plot(lmod)
yprime <- y/x
xprime <- 1/x
lmod2 = lm(yprime ~ xprime)
summary(lmod2)
plot(xprime,yprime)
abline(lmod2, col = "red")
par(mfrow = c(2,2))
plot(lmod)
par(mfrom = c(1,1))
yprime <- y/x
xprime <- 1/x
lmod2 = lm(yprime ~ xprime)
summary(lmod2)
plot(xprime,yprime)
abline(lmod2, col = "red")
par(mfrom = c(1,1))
par(mfrow = c(1,1))
plot(xprime,yprime)
abline(lmod2, col = "red")
lmod
lmod2
plot(x,y)
abline(lmod)
abline(coef(lmod2[2], coef(lmod2)[1], col = "red"))
legend(0.5, 6, legend = c("OLS", "WLS"), col = c("black", "red"))
abline(coef(lmod2[2], coef(lmod2)[1]), col = "red")
abline(coef(lmod2[2]), coef((lmod2)[1]), col = "red")
abline(coef(lmod2)[2], coef((lmod2)[1]), col = "red")
legend(0.5, 6, legend = c("OLS", "WLS"), col = c("black", "red"))
abline(coef(lmod2)[2], coef(lmod2)[1], col = "red")
years = seq(1870,2010, 15)
years
years = seq(1870,2010, 16)
years
years = seq(1870,2010, 10)
years
pop = [343,3069]
pop = (343,3069)
pop = [343 3069]
pop = []
pop = array(343)
pop
pop = array(343, 3069)
pop
pop = array((343, 3069))
pop = array((343 3069))
pop = array((343,3069),1)
pop
c(1, 2, 5.3, 6, -2, 4)
pop = c(343,3069)
pop
pop = c(343,3069,3330,6150,9539,11006,11223,12958,19999,37718,66870,76685,83312,94673,97385)
pop
plot(years,pop)
plot(years,pop, title("Pop in Boulder, CO"))
library(faraway)
data(trees)
library(leaps)
lmod <- lm(log(Volume) ~ Girth + Height, data = trees)
summary(lmod)
lmod <- lm(log(Volume) ~ Girth * Height, data = trees)
summary(lmod)
lmod <- lm(log(Volume) ~ Girth^2 * Height, data = trees)
summary(lmod)
lmod <- lm(log(Volume) ~ Girth * Height, data = trees)
t.test(lmod)
t.test(log(trees$Volume))
lmod <- lm(log(Volume) ~ I(Girth,2) * I(Height,2), data = trees)
lmod <- lm(log(Volume) ~ I(Girth^2) * I(Height^2), data = trees)
summary(lmod)
lmod <- lm(log(Volume) ~ Girth * Height + I(Girth^2) + I(Height^2), data = trees)
summary(lmod)
t.test(lmod)
update(lmod)
step(lmod,direction="backward",test="t")
step(lmod,direction="backward",test="F")
update(lmod)
step(lmod,direction="backward",test="F")
lmod <- step(lmod,direction="backward",test="F")
lmod <- step(lmod,direction="backward",test="F")
lmod <- step(lmod,direction="backward",test="F")
lmod <- step(lmod,direction="backward",test="F")
lmod <- step(lmod,direction="backward",test="F")
lmod <- lm(log(Volume) ~ Girth * Height + I(Girth^2) + I(Height^2), data = trees)
lmod <- step(lmod,direction="backward",test="F")
lmod <- lm(log(Volume) ~ Girth * Height + I(Girth^2) + I(Height^2), data = trees)
summary(lmod)
lmod <- step(lmod,direction="backward",test="F")
summary(lmod)
lmod <- lm(log(Volume) ~ Girth * Height + I(Girth^2) + I(Height^2), data = trees)
lmod.step <- step(lmod)
summary(lmod)
summary(lmod.step)
lmod <- lm(log(Volume) ~ Girth * Height + I(Girth^2) + I(Height^2), data = trees)
summary(lmod)
lmod.step <- update(lmod, ~. - Girth:Height)
summary(lmod.step)
lmod.step <- update(lmod, ~. - I(Height^2))
summary(lmod.step)
lmod <- lm(log(Volume) ~ Girth * Height + I(Girth^2) + I(Height^2), data = trees)
summary(lmod)
lmod.step <- update(lmod, ~. - Girth:Height)
summary(lmod.step)
lmod.step <- update(lmod.step, ~. - I(Height^2))
summary(lmod.step)
lmod.step <- update(lmod.step, ~. - I(Girth^2))
summary(lmod.step)
AIC(lmod.step)
library(leaps)
install(leaps)
install.packages(leaps)
install.packages("leaps")
library(leaps)
regsubsets(lmod)
help(lmod)
help(regsubsets)
lmod.step <- update(lmod, ~. - Girth:Height)
summary(lmod.step)
lmod.step <- update(lmod.step, ~. - I(Height^2))
summary(lmod.step)
regsubsets(log(Volume) ~ Girth + I(Girth^2) + Height + I(Height^2) + Girth:Height, data = trees)
b = regsubsets(log(Volume) ~ Girth + I(Girth^2) + Height + I(Height^2) + Girth:Height, data = trees)
rs = summary(b)
rs$rss
rs$which
AIC = rs$bic + p*(2 - log(length(trees$Volume)))
AIC
rm(list = ls())
library(faraway)
library(MASS)
library(aod) #wald.test
data(orings)
head(orings)
prop <- cbind(orings, orings$damage/6)
head(orings)
head(prop)
orings <- cbind(orings, orings$damage/6)
head(orings)
orings <- cbind(orings, prop <- orings$damage/6)
head(orings)
data(orings)
head(orings)
orings <- cbind(orings, prop <- orings$damage/6)
head(orings)
data(orings)
head(orings)
prop <- orings$damage/6
orings <- cbind(orings, prop)
head(orings)
data(orings)
head(orings)
prop <- orings$damage/6
orings.2 <- cbind(orings, prop)
head(orings.2)
plot(orings$temp, orings.2$prop)
abline(lm(orings.2$prop ~ orings$temp))
??glm
glm(lm(orings.2$prop ~ orings$temp))
glm(lm(orings.2$prop ~ orings$temp), family = binomial())
glm(lm(orings.2$prop ~ orings$temp), family = "binomial")
head(orings.2)
glm(lm(orings.2$prop ~ orings$temp), family = "binomial", factor = orings.2$prop)
glm( formula = cbind(orings$damage, 6 - orings$damage) ~ temp, family = binomial, data = orings)
ilogit(prop)
?ilogit
plot(ilogit(prop))
plot(ilogit(x))
x <- glm( formula = cbind(orings$damage, 6 - orings$damage) ~ temp, family = binomial, data = orings)
plot(ilogit(x))
plot(ilogit(prop))
plot(x)
?ilogit
plot(orings$temp, orings.2$prop, xlim = c(25,85), ylim(0,1), xlab = "temp")
x = sep(25,85,1)
lines(x,ilogit(11.66299 - 0.21623*x),col = 'red')
plot(orings$temp, orings.2$prop, xlim = c(25,85), ylim(0,1), xlab = "temp")
plot(orings$temp, orings.2$prop, xlim = c(25,85), ylim = c(0,1), xlab = "temp")
x = sep(25,85,1)
lines(x,ilogit(11.66299 - 0.21623*x),col = 'red')
x = seq(25,85,1)
lines(x,ilogit(11.66299 - 0.21623*x),col = 'red')
gizzard <- glm( formula = cbind(orings$damage, 6 - orings$damage) ~ temp, family = binomial, data = orings)
?predict
predict(gizzard, c(45,46))
predict(gizzard, 45)
predict.glm(gizzard, newdata = 45)
predict.glm(gizzard, newdata = 45, type = 'response')
gizzard <- glm( formula = cbind(orings$damage, 6 - orings$damage) ~ temp, family = binomial, data = orings)
predict.glm(gizzard, newdata = 45, type = 'response')
theta = seq(0, 1, by = 0.1)
theta
hyp = ifelse(theta > 0.5, c("H_1"), c("H_0"))
prior = c(rep(0.0333,6), rep(0.16, 5)) #distribute prior over values of parameter
likelihood = dbinom(1,10,theta) #notice the likelihood fixes the data and lets the parameter vary
evidence = sum(likelihood*prior)
posterior = prior * likelihood/evidence
table = data.frame(hyp, theta, prior, likelihood, prior*likelihood, posterior)
table
posterior
x = (0.1942,0.51300)
setwd("/Users/schubydooo/Documents/GitHub/Crypto-Pirates")
rm(list = ls())
bitcoin = read.csv("Datasets/bitcoin_price.csv")
head(bitcoin)
bitcoin.lmod <- lm(bitcoin$Close ~ bitcoin$Open)
summary(bitcoin.lmod)
plot(bitcoin$Open, bitcoin$Close, xlab = "Open", ylab = "Close", main = "Open vs Close")
abline(bitcoin.lmod, col = "red")
bitcoin$PDifference = (bitcoin$Close - bitcoin$Open)/bitcoin$Open
mean(bitcoin$PDifference) #0.0029% change expected per day
sd(bitcoin$PDifference)  #0.043% sd
bitcoinPOutliers <- bitcoin[abs(bitcoin$PDifference) > sd(bitcoin$PDifference)*3,]
bitcoinPOutliers
bitcoin$Difference = bitcoin$Close - bitcoin$Open
mean(bitcoin$Difference) #Mean of 2.48 change per day
sd(bitcoin$Difference)  #sd of 53.58
bitcoinOutliers <- bitcoin[abs(bitcoin$Difference) > sd(bitcoin$Difference)*3,]
bitcoin$PDifference = (bitcoin$Close - bitcoin$Open)/bitcoin$Open
mean(bitcoin$PDifference) #0.0029% change expected per day
sd(bitcoin$PDifference)  #0.043% sd
bitcoinPOutliers <- bitcoin[abs(bitcoin$PDifference) > sd(bitcoin$PDifference)*3,]
bitcoinPOutliers
